{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"py-osrm","text":"<p>py-osrm is a Python package that binds to osrm-backend using nanobind.</p>"},{"location":"#supported-platforms","title":"Supported Platforms","text":"Platform Arch Linux x86_64 MacOS x86_64 Windows x86_64 ---"},{"location":"#installation","title":"Installation","text":"<p>py-osrm is supported on CPython 3.8+, and can be installed from source via running the following command in the source folder:</p> <pre><code>pip install .\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>The following example will showcase the process of calculating routes between two coordinates.</p> <p>First, import the <code>osrm</code> library, and instantiate an instance of OSRM:</p> <pre><code>import osrm\n\n# Instantiate py_osrm instance\npy_osrm = osrm.OSRM(\"./tests/test_data/ch/monaco.osrm\")\n</code></pre> <p>Then, declare <code>RouteParameters</code>, and then pass it into the <code>py_osrm</code> instance:</p> <pre><code># Declare Route Parameters\nroute_params = osrm.RouteParameters(\n    coordinates = [(7.41337, 43.72956), (7.41546, 43.73077)]\n)\n\n# Pass it into the py_osrm instance\nres = py_osrm.Route(route_params)\n\n# Print out result output\nprint(res[\"waypoints\"])\nprint(res[\"routes\"])\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation Page</p>"},{"location":"pages/base/","title":"BaseParameters","text":"Note <p>This is the parent class to many parameter classes, and not intended to be used on its own.</p> <p>Parameters:</p> Name Type Description Default <code>coordinates</code> <code>list of floats pairs</code> <p>Pairs of Longitude and Latitude Coordinates. (default [])</p> required <code>hints</code> <code>list</code> <p>Hint from previous request to derive position in street network. (default [])</p> required <code>radiuses</code> <code>list of floats</code> <p>Limits the search to given radius in meters. (default [])</p> required <code>bearings</code> <code>list of int pairs</code> <p>Limits the search to segments with given bearing in degrees towards true north in clockwise direction. (default [])</p> required <code>approaches</code> <code>list</code> <p>Keep waypoints on curb side. (default [])</p> required <code>generate_hints</code> <code>bool</code> <p>Adds a hint to the response which can be used in subsequent requests. (default True)</p> required <code>exclude</code> <code>list of strings</code> <p>Additive list of classes to avoid. (default [])</p> required <code>snapping</code> <code>string 'default' | 'any'</code> <p>'default' snapping avoids is_startpoint edges, 'any' will snap to any edge in the graph. (default '')</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>BaseParameters</code> <p>A BaseParameter object, that is the parent object to many other Parameter objects.</p> <code>IsValid</code> <code>bool</code> <p>A bool value denoting validity of parameter values.</p> <p>Attributes:</p> Name Type Description <code>coordinates</code> <code>list of floats pairs</code> <p>Pairs of longitude &amp; latitude coordinates.</p> <code>hints</code> <code>list</code> <p>Hint from previous request to derive position in street network.</p> <code>radiuses</code> <code>list of floats</code> <p>Limits the search to given radius in meters.</p> <code>bearings</code> <code>list of int pairs</code> <p>Limits the search to segments with given bearing in degrees towards true north in clockwise direction.</p> <code>approaches</code> <code>list</code> <p>Keep waypoints on curb side.</p> <code>exclude</code> <code>list of strings</code> <p>Additive list of classes to avoid, order does not matter.</p> <code>format</code> <code>string</code> <p>Specifies response type - currently only 'json' is supported.</p> <code>generate_hints</code> <code>bool</code> <p>Adds a hint to the response which can be used in subsequent requests.</p> <code>skip_waypoints</code> <code>list</code> <p>Removes waypoints from the response.</p> <code>snapping</code> <code>string</code> <p>'default' snapping avoids is_startpoint edges, 'any' will snap to any edge in the graph.</p>"},{"location":"pages/match/","title":"Match","text":"<p>Matches/snaps given GPS points to the road network in the most plausible way.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; res = py_osrm.Match(match_params)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>match_params</code> <code>MatchParameters</code> <p>MatchParameters Object.</p> required <p>Returns:</p> Type Description <code>json</code> <p>A Match JSON Response.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>On invalid MatchParameters.</p>"},{"location":"pages/match/#match-parameters","title":"Match Parameters","text":"<p>             Bases: <code>osrm.osrm_ext.RouteParameters</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; match_params = osrm.MatchParameters(\n        coordinates = [(7.41337, 43.72956), (7.41546, 43.73077), (7.41862, 43.73216)],\n        timestamps = [1424684612, 1424684616, 1424684620],\n        gaps = 'split',\n        tidy = True\n    )\n&gt;&gt;&gt; match_params.IsValid()\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamps</code> <code>list of unsigned int</code> <p>Timestamps for the input locations in seconds since UNIX epoch. (default [])</p> required <code>gaps</code> <code>list of 'split' | 'ignore'</code> <p>Allows the input track splitting based on huge timestamp gaps between points. (default [])</p> required <code>tidy</code> <code>bool</code> <p>Allows the input track modification to obtain better matching quality for noisy tracks. (default False)</p> required <code>RouteParameters</code> <code>RouteParameters</code> <p>Keyword arguments from parent class.</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>MatchParameters</code> <p>A MatchParameters object, for usage in Match.</p> <code>IsValid</code> <code>bool</code> <p>A bool value denoting validity of parameter values.</p> <p>Attributes:</p> Name Type Description <code>timestamps</code> <code>list of unsigned int</code> <p>Timestamps for the input locations in seconds since UNIX epoch.</p> <code>gaps</code> <code>string</code> <p>Allows the input track splitting based on huge timestamp gaps between points.</p> <code>tidy</code> <code>bool</code> <p>Allows the input track modification to obtain better matching quality for noisy tracks.</p> <code>RouteParameters</code> <code>RouteParameters</code> <p>Attributes from parent class.</p>"},{"location":"pages/nearest/","title":"Nearest","text":"<p>Snaps a coordinate to the street network and returns the nearest matches.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; res = py_osrm.Nearest(nearest_params)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>nearest_params</code> <code>NearestParameters</code> <p>NearestParameters Object.</p> required <p>Returns:</p> Type Description <code>json</code> <p>A Nearest JSON Response.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>On invalid NearestParameters.</p>"},{"location":"pages/nearest/#nearest-parameters","title":"Nearest Parameters","text":"<p>             Bases: <code>osrm.osrm_ext.BaseParameters</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; nearest_params = osrm.NearestParameters(\n        coordinates = [(7.41337, 43.72956)],\n        exclude = ['motorway']\n    )\n&gt;&gt;&gt; nearest_params.IsValid()\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>BaseParameters</code> <code>BaseParameters</code> <p>Keyword arguments from parent class.</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>NearestParameters</code> <p>A NearestParameters object, for usage in osrm.OSRM.Nearest.</p> <code>IsValid</code> <code>bool</code> <p>A bool value denoting validity of parameter values.</p> <p>Attributes:</p> Name Type Description <code>number_of_results</code> <code>unsigned int</code> <p>Number of nearest segments that should be returned.</p> <code>BaseParameters</code> <code>BaseParameters</code> <p>Attributes from parent class.</p>"},{"location":"pages/osrm/","title":"OSRM","text":"<p>Examples:</p> <pre><code>&gt;&gt;&gt; import osrm\n&gt;&gt;&gt; py_osrm = osrm.OSRM('.tests/test_data/ch/monaco.osrm')\n&gt;&gt;&gt; py_osrm = osrm.OSRM(\n        algorithm = 'CH',\n        storage_config = '.tests/test_data/ch/monaco.osrm',\n        max_locations_trip = 3,\n        max_locations_viaroute = 3,\n        max_locations_distance_table = 3,\n        max_locations_map_matching = 3,\n        max_results_nearest = 1,\n        max_alternatives = 1,\n        default_radius = 'unlimited'\n    )\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>storage_config</code> <code>string</code> <p>File path string to storage config.</p> required <code>EngineConfig</code> <code>EngineConfig</code> <p>Keyword arguments from the EngineConfig class.</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>OSRM</code> <p>A OSRM object.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>On invalid OSRM EngineConfig parameters.</p>"},{"location":"pages/route/","title":"Route","text":"<p>Finds the fastest route between coordinates in the supplied order.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; res = py_osrm.Route(route_params)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>route_params</code> <code>RouteParameters</code> <p>RouteParameters Object.</p> required <p>Returns:</p> Type Description <code>json</code> <p>A Route JSON Response.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>On invalid RouteParameters.</p>"},{"location":"pages/route/#route-parameters","title":"Route Parameters","text":"<p>             Bases: <code>osrm.osrm_ext.BaseParameters</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; route_params = osrm.RouteParameters(\n        coordinates = [(7.41337, 43.72956), (7.41546, 43.73077)],\n        steps = True,\n        number_of_alternatives = 3,\n        annotations = ['speed'],\n        geometries = 'polyline',\n        overview = 'simplified',\n        continue_straight = False,\n        waypoints = [0, 1],\n        radiuses = [4.07, 4.07],\n        bearings = [(200, 180), (250, 180)],\n        # approaches = ['unrestricted', 'unrestricted'],\n        generate_hints = False,\n        exclude = ['motorway'],\n        snapping = 'any'\n    )\n&gt;&gt;&gt; route_params.IsValid()\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>steps</code> <code>bool</code> <p>Return route steps for each route leg. (default False)</p> required <code>number_of_alternatives</code> <code>int</code> <p>Search for n alternative routes. (default 0)</p> required <code>annotations</code> <code>list of 'none' | 'duration' |  'nodes' | 'distance' | 'weight' | 'datasources'                     | 'speed' | 'all'</code> <p>Returns additional metadata for each coordinate along the route geometry. (default [])</p> required <code>geometries</code> <code>string 'polyline' | 'polyline6' | 'geojson'</code> <p>Returned route geometry format - influences overview and per step. (default )</p> required <code>overview</code> <code>string 'simplified' | 'full' | 'false'</code> <p>Add overview geometry either full, simplified. (default '')</p> required <code>continue_straight</code> <code>bool</code> <p>Forces the route to keep going straight at waypoints, constraining u-turns. (default {})</p> required <code>waypoints</code> <code>list of int</code> <p>Treats input coordinates indicated by given indices as waypoints in returned Match object. (default [])</p> required <code>BaseParameters</code> <code>BaseParameters</code> <p>Keyword arguments from parent class.</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>RouteParameters</code> <p>A RouteParameters object, for usage in Route.</p> <code>IsValid</code> <code>bool</code> <p>A bool value denoting validity of parameter values.</p> <p>Attributes:</p> Name Type Description <code>steps</code> <code>bool</code> <p>Return route steps for each route leg.</p> <code>alternatives</code> <code>bool</code> <p>Search for alternative routes.</p> <code>number_of_alternatives</code> <code>int</code> <p>Search for n alternative routes.</p> <code>annotations_type</code> <code>string</code> <p>Returns additional metadata for each coordinate along the route geometry.</p> <code>geometries</code> <code>string</code> <p>Returned route geometry format - influences overview and per step.</p> <code>overview</code> <code>string</code> <p>Add overview geometry either full, simplified.</p> <code>continue_straight</code> <code>bool</code> <p>Forces the route to keep going straight at waypoints, constraining u-turns.</p> <code>BaseParameters</code> <code>BaseParameters</code> <p>Attributes from parent class.</p>"},{"location":"pages/table/","title":"Table","text":"<p>Computes the duration of the fastest route between all pairs of supplied coordinates.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; res = py_osrm.Table(table_params)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>table_params</code> <code>TableParameters</code> <p>TableParameters Object.</p> required <p>Returns:</p> Type Description <code>json</code> <p>A Table JSON Response.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>On invalid TableParameters.</p>"},{"location":"pages/table/#table-parameters","title":"Table Parameters","text":"<p>             Bases: <code>osrm.osrm_ext.BaseParameters</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; table_params = osrm.TableParameters(\n        coordinates = [(7.41337, 43.72956), (7.41546, 43.73077)],\n        sources = [0],\n        destinations = [1],\n        annotations = ['duration'],\n        fallback_speed = 1,\n        fallback_coordinate_type = 'input',\n        scale_factor = 0.9\n    )\n&gt;&gt;&gt; table_params.IsValid()\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sources</code> <code>list of int</code> <p>Use location with given index as source. (default [])</p> required <code>destinations</code> <code>list of int</code> <p>Use location with given index as destination. (default [])</p> required <code>annotations</code> <code>list of 'none' | 'duration' | 'distance' | 'all'</code> <p>Returns additional metadata for each coordinate along the route geometry. (default [])</p> required <code>fallback_speed</code> <code>float</code> <p>If no route found between a source/destination pair, calculate the as-the-crow-flies distance,                     then use this speed to estimate duration. (default INVALID_FALLBACK_SPEED)</p> required <code>fallback_coordinate_type</code> <code>string 'input' | 'snapped'</code> <p>When using a fallback_speed, use the user-supplied coordinate (input),                     or the snapped location (snapped) for calculating distances. (default '')</p> required <code>scale_factor</code> <p>Scales the table duration values by this number (use in conjunction with annotations=durations). (default 1.0)</p> required <code>BaseParameters</code> <code>BaseParameters</code> <p>Keyword arguments from parent class.</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>TableParameters</code> <p>A TableParameters object, for usage in Table.</p> <code>IsValid</code> <code>bool</code> <p>A bool value denoting validity of parameter values.</p> <p>Attributes:</p> Name Type Description <code>sources</code> <code>list of int</code> <p>Use location with given index as source.</p> <code>destinations</code> <code>list of int</code> <p>Use location with given index as destination.</p> <code>annotations</code> <code>string</code> <p>Returns additional metadata for each coordinate along the route geometry.</p> <code>fallback_speed</code> <code>float</code> <p>If no route found between a source/destination pair, calculate the as-the-crow-flies distance,                     then use this speed to estimate duration.</p> <code>fallback_coordinate_type</code> <code>string</code> <p>When using a fallback_speed, use the user-supplied coordinate (input),                     or the snapped location (snapped) for calculating distances.</p> <code>scale_factor</code> <code>string</code> <p>Scales the table duration values by this number (use in conjunction with annotations=durations).</p> <code>BaseParameters</code> <code>BaseParameters</code> <p>Attributes from parent class.</p>"},{"location":"pages/tile/","title":"Tile","text":"<p>Computes the duration of the fastest route between all pairs of supplied coordinates.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; res = py_osrm.Tile(tile_params)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>tile_params</code> <code>TileParameters</code> <p>TileParameters Object.</p> required <p>Returns:</p> Type Description <code>json</code> <p>A Tile JSON Response.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>On invalid TileParameters.</p>"},{"location":"pages/tile/#tile-parameters","title":"Tile Parameters","text":"<p>Examples:</p> <pre><code>&gt;&gt;&gt; tile_params = osrm.TileParameters([17059, 11948, 15])\n&gt;&gt;&gt; tile_params = osrm.TileParameters(\n        x = 17059,\n        y = 11948,\n        z = 15\n    )\n&gt;&gt;&gt; tile_params.IsValid()\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>list</code> <code>list of int</code> <p>Instantiates an instance of TileParameters using an array [x, y, z].</p> required <code>x</code> <code>int</code> <p>x value.</p> required <code>y</code> <code>int</code> <p>y value.</p> required <code>z</code> <code>int</code> <p>z value.</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>TileParameters</code> <p>A TileParameters object, for usage in Tile.</p> <code>IsValid</code> <code>bool</code> <p>A bool value denoting validity of parameter values.</p> <p>Attributes:</p> Name Type Description <code>x</code> <code>int</code> <p>x value.</p> <code>y</code> <code>int</code> <p>y value.</p> <code>z</code> <code>int</code> <p>z value.</p>"},{"location":"pages/trip/","title":"Trip","text":"<p>Solves the Traveling Salesman Problem using a greedy heuristic (farthest-insertion algorithm).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; res = py_osrm.Trip(trip_params)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trip_params</code> <code>TripParameters</code> <p>TripParameters Object.</p> required <p>Returns:</p> Type Description <code>json</code> <p>A Trip JSON Response.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>On invalid TripParameters.</p>"},{"location":"pages/trip/#trip-parameters","title":"Trip Parameters","text":"<p>             Bases: <code>osrm.osrm_ext.RouteParameters</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trip_params = osrm.TripParameters(\n        coordinates = [(7.41337, 43.72956), (7.41546, 43.73077)],\n        source = 'any',\n        destination = 'last',\n        roundtrip = False\n    )\n&gt;&gt;&gt; trip_params.IsValid()\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>string 'any' | 'first'</code> <p>Returned route starts at 'any' or 'first' coordinate. (default '')</p> required <code>destination</code> <code>string 'any' | 'last'</code> <p>Returned route ends at 'any' or 'last' coordinate. (default '')</p> required <code>roundtrip</code> <code>bool</code> <p>Returned route is a roundtrip (route returns to first location). (default True)</p> required <code>RouteParameters</code> <code>RouteParameters</code> <p>Keyword arguments from parent class.</p> required <p>Returns:</p> Name Type Description <code>__init__</code> <code>TripParameters</code> <p>A TripParameters object, for usage in Trip.</p> <code>IsValid</code> <code>bool</code> <p>A bool value denoting validity of parameter values.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code>string</code> <p>Returned route starts at 'any' or 'first' coordinate.</p> <code>destination</code> <code>string</code> <p>Returned route ends at 'any' or 'last' coordinate.</p> <code>roundtrip</code> <code>bool</code> <p>Returned route is a roundtrip (route returns to first location).</p> <code>RouteParameters</code> <code>RouteParameters</code> <p>Attributes from parent class.</p>"}]}